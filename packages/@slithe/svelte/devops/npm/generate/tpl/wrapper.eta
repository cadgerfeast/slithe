<script lang="ts">
  // Imports
	import { onMount, onDestroy, createEventDispatcher } from 'svelte';
<% if (Object.keys(it.wrapper.imports).length > 0) { %>
<% Object.keys(it.wrapper.imports).forEach((_import) => { %>
  import type { <% it.wrapper.imports[_import].forEach((type) => { %><%= type %>, <% })%> } from '<%= _import %>';
<% }) %>
<% } %>
  let ref: <%= it.wrapper.typeName %>;
<% if (it.wrapper.props.length > 0) { %>
	// Props
<% it.wrapper.props.forEach((prop) => { %>
	export let <%= prop.name %>: <%~ prop.type %><% if (!prop.required) { %>|undefined = undefined<% } %>;
<% }) %>
<% } %>
<% if (it.wrapper.bindings.length > 0 || it.wrapper.events.length > 0) { %>
<% if (it.wrapper.bindings.length > 0) { %>
  // Bindings
	const bindings = {
<% it.wrapper.bindings.forEach((binding) => { %>
		'<%= binding.event %>': ({ detail }: CustomEvent<<%= binding.type %>>) => {
			<%= binding.prop %> = detail;
		},
<% }) %>
  };
<% } %>
<% if (it.wrapper.events.length > 0) { %>
  // Events
	const dispatch = createEventDispatcher<{
<% it.wrapper.events.forEach((event) => { %>
		'<%= event.name %>': <%= event.type %>;
<% }) %>
	}>();
	const events = {
<% it.wrapper.events.forEach((event) => { %>
		'<%= event.name %>': ({ detail }: CustomEvent<<%= event.type %>>) => {
			dispatch('<%= event.name %>', detail);
		},
<% }) %>
  };
<% } %>
<% if (it.wrapper.methods.length > 0) { %>
  // Methods
<% it.wrapper.methods.forEach((method) => { %>
  export async function <%= method.name %> (<% method.parameters.forEach((parameter) => { %><%= parameter.name %>: <%~ parameter.type %>, <% }) %>): <%~ method.return %> {
	  return ref.<%= method.name %>(<% method.parameters.forEach((parameter) => { %><%= parameter.name %>, <% }) %>);
	}
<% }) %>
<% } %>
	// Lifecycle
	onMount(() => {
<% it.wrapper.bindings.forEach((binding) => { %>
		ref.addEventListener('<%= binding.event %>', bindings.<%= binding.event %>);
<% }) %>
<% it.wrapper.events.forEach((event) => { %>
		ref.addEventListener('<%= event.name %>', events.<%= event.name %>);
<% }) %>
	});
	onDestroy(() => {
<% it.wrapper.bindings.forEach((binding) => { %>
		ref.removeEventListener('<%= binding.event %>', bindings.<%= binding.event %>);
<% }) %>
<% it.wrapper.events.forEach((event) => { %>
		ref.removeEventListener('<%= event.name %>', events.<%= event.name %>);
<% }) %>
	});
<% } %>
</script>

<<%= it.wrapper.tagName %> bind:this={ref}<% it.wrapper.props.forEach((prop) => { %> {<%= prop.name %>}<% }) %>>
	<slot/>
<% if (it.wrapper.slots.length > 0) { %>
<% it.wrapper.slots.forEach((slot) => { %>
	<slot name='<%= slot %>' slot='<%= slot %>'/>
<% }) %>
<% } %>
</<%= it.wrapper.tagName %>>
